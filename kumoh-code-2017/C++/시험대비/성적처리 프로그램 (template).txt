#include<iostream>
#include<string>
#include<fstream>
using namespace std;

class ExceptionNotFound
{
private:
	int size;
public:
	ExceptionNotFound() { }
	ExceptionNotFound(int size) { this->size = size; }
	~ExceptionNotFound() { }

	int getSize() { return size; }
};

template <typename T>
class student
{
	friend ostream& operator<<(ostream& os, const student& st);
private:
	T name;
	T korean, math, english;
public:
	student() { }
	student(T name, T korean, T math, T english)
	{
		this->name = name;
		this->korean = korean;
		this->math = math;
		this->english = english;
	}
	~student() {}

	T getName() { return name; }
	T getKorean() { return korean; }
	T getMath() { return math; }
	T getEnglish() { return english; }

	void setName(T name) { this->name = name; }
	void setKorean(T korean) { this->korean = korean; }
	void setMath(T math) { this->math = math; }
	void setEnglish(T english) { this->english = english; }

	bool operator>(const student& tmp)
	{
		if ((korean + math + english) > (tmp.korean + tmp.math + tmp.english))
			return true;
		else
			return false;
	}
	bool operator<(const student& tmp)
	{
		if ((korean + math + english) < (tmp.korean + tmp.math + tmp.english))
			return true;
		else
			return false;
	}
	student operator+(const student& st)
	{	 // const int a
		return student("", korean + st.korean, math + st.math, english + st.english);	 // A(x+a)
	}
	T getEverage();
};

template <typename T>
T student<T>::getEverage()
{
	return ((korean + math + english) / 3);
}
template <typename T>
ostream& operator<<(ostream& os, const student<T>& st)
{
	os << "이름 : " << st.name << endl;
	os << "국어/수학/영어 - " << st.korean << "/" << st.math << "/" << st.english << endl;
	return os;
}
template <typename T>
void save(student<T> st[], T fileName);

int main()
{

	student<string> s[2] = { student<string>("won","100","100","50"), student<string>("jong","50","60","20") }, tmp;

	cout << s[0] << endl;  // OK
						   // 총점 기준
	if (s[0] > s[1])
		cout << s[0].getName() << " is higher than " << s[1].getName() << endl;
	else
		cout << s[1].getName() << " is higher than " << s[0].getName() << endl;

	tmp = s[0] + s[1];

	cout << tmp.getEverage() << endl;

	try
	{
		save<string>(s, "test.dat");
	}
	catch (ExceptionNotFound e)
	{
		exit(1);
	}
	return 0;
}
template <typename T>
void save(student<T> st[], T fileName)
{
	ofstream os;
	try
	{
		os.open(fileName, ifstream::binary);
		if (os.fail())
			throw ExceptionNotFound(-1);
		for (int i = 0; i < 2; i++)
		{
			os.write((char*)& st[i], sizeof(student<T>));
			os.close();
		}
	}
	catch (ExceptionNotFound e)
	{
		cout << "없는 파일입니다" << endl;
		throw e;
	}
}