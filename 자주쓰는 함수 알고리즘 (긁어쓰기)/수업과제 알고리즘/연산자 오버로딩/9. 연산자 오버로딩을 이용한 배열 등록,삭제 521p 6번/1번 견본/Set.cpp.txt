#include "Set.h"



Set::Set()
{
	arr = new int[MAX_ARR_NUM];
	for (int i = 0; i < MAX_ARR_NUM; i++)
		arr[i] = NULL;
	count = 0;
}


Set::~Set()
{
}

Set Set::operator+(int num)
{
	if (count == 30)
		cout << "용량 초과!" << endl;
	else
		arr[count++] = num;

	return *this;
}

Set Set::operator-(int num)
{
	int flag = 0;
	if (count == 0)
		cout << "원소가 없습니다." << endl;
	else
	{
		for (int i = 0; i < count; i++)
		{
			if (arr[i] == num)
			{
				for (i; i < count; i++)
				{
					arr[i] = arr[i + 1];
					flag = 1;
				}
				count--;
				break;
			}
		}

		if (flag == 1)
			cout << "삭제 완료!" << endl;
		else if (flag == 0)
			cout << "입력한 숫자가 존재하지 않습니다." << endl;
	}

	return *this;
}

bool Set::operator==(const Set s)
{
	bool boolean = true;

	if (count == s.count)
	{
		for (int i = 0; i < count; i++)
		{
			if (s.arr[i] != arr[i])
			{
				boolean = false;
				break;
			}
		}
	}

	else if (count != s.count)
		boolean = false;

	return boolean;
}

Set Set::operator | (const Set& s) //합집합
{
	int sum_count = count + s.count;
	int* temp_arr = new int[sum_count];

	for (int i = 0; i < count; i++)
	{
		temp_arr[i] = arr[i];
	}

	for (int i = count; i < sum_count; i++)
	{
		temp_arr[i] = s.arr[i-count];
	}

	sort(temp_arr+0,temp_arr+sum_count);

	cout << "합집합 : ";
	for (int i = 0; i < sum_count; i++)
	{
		cout << temp_arr[i] << " ";
	}

	return* this;
}

Set Set::operator & (const Set& s)
{
	int* temp_arr = new int[30];
	int temp_count = 0;

	for (int i = 0; i < count; i++)
	{
		for (int j = 0; j < s.count; j++)
		{
			if (arr[i] == s.arr[j])
			{
				temp_arr[temp_count++] = s.arr[j];
			}
		}
	}

	sort(temp_arr + 0, temp_arr + temp_count);

	if (temp_count == 0)
		cout << "교집합이 없습니다." << endl;

	else
	{
		cout << "교집합 : ";
		for (int i = 0; i < temp_count; i++)
		{
			cout<<temp_arr[i] << " ";
		}
		cout << endl;
	}		

	return* this;
}

ostream & operator<<(ostream & os, const Set & s)
{
	if (s.count == 0)
		os << "원소가 없습니다." << endl;
	else
	{
		os << "집합의 원소 : ";
		for (int i = 0; i < s.count; i++)
		{
			os << s.arr[i] << " ";
		}
		os << endl;
	}

	return os;
}

istream & operator>>(istream& is, Set& s)
{
	if (s.count == 30)
		cout << "용량 초과!" << endl;
	else
	{
		int num;
		cout << "insert num : ";
		is >> num;
		s + num;
	}

	return is;
}